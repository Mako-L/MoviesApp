// Interface defining the structure for a genre of movies
export interface Genre {
    id: number;  // Unique identifier for the genre
    name: string;  // Name of the genre
}

// Interface defining the structure for a production company
export interface ProductionCompany {
    id: number;  // Unique identifier for the production company
    logo_path: string | null;  // Path to the company's logo or null if not available
    name: string;  // Name of the production company
    origin_country: string;  // Country where the company is based
}

// Interface defining the structure for a production country
export interface ProductionCountry {
    iso_3166_1: string;  // ISO code for the country
    name: string;  // Name of the country
}

// Interface defining the structure for languages spoken in the movie
export interface SpokenLanguage {
    english_name: string;  // English name of the language
    iso_639_1: string;  // ISO code for the language
    name: string;  // Localized name of the language
}

// Interface defining the basic structure for a movie
export interface Movie {
    id: number;  // Unique identifier for the movie
    title: string;  // Title of the movie
    overview: string;  // Summary of the movie
    release_date: string;  // Release date of the movie
    poster_path?: string;  // Optional path to the movie's poster
    backdrop_path?: string;  // Optional path to the movie's backdrop image
    genre_ids?: number[];  // Optional array of genre IDs associated with the movie
    original_language?: string;  // Original language of the movie
    original_title?: string;  // Original title of the movie
    popularity?: number;  // Popularity score of the movie
    video?: boolean;  // Indicates if the movie has a video
    vote_average?: number;  // Average voting score
    vote_count?: number;  // Total number of votes
}

// Interface extending Movie with detailed attributes specific to a movie detail view
export interface MovieDetail extends Movie {
    adult: boolean;  // Indicates if the movie is for adults
    belongs_to_collection: null | object;  // Collection to which the movie belongs, if any
    budget: number;  // Budget of the movie
    genres: Genre[];  // Array of genres
    homepage: string;  // URL of the movie's homepage
    imdb_id: string;  // IMDb ID of the movie
    production_companies: ProductionCompany[];  // Array of production companies
    production_countries: ProductionCountry[];  // Array of production countries
    revenue: number;  // Revenue generated by the movie
    runtime: number;  // Runtime of the movie in minutes
    spoken_languages: SpokenLanguage[];  // Array of spoken languages
    status: string;  // Current status of the movie (e.g., Released, Post Production)
    tagline: string;  // Tagline of the movie
}

// Interface defining the state for managing movies in the store
export interface MoviesState {
    movies: Movie[];  // Array of movies
    movieDetail: MovieDetail | null;  // Detailed information of a selected movie, or null if not selected
    error: string | null;  // Error message, if any error occurs
    totalItems: number;  // Total number of items available
    moviesLoading: boolean;  // Flag indicating if movies are currently being loaded
    movieDetailLoading: boolean;  // Flag indicating if movie details are currently being loaded
    page: number;  // Current page number in pagination
    offline: boolean;  // Flag indicating if the application is offline
}

// Action types constants used in Redux for handling movies data
export const FETCH_TOP_MOVIES_SUCCESS = 'FETCH_TOP_MOVIES_SUCCESS';
export const FETCH_TOP_MOVIES_FAILURE = 'FETCH_TOP_MOVIES_FAILURE';
export const FETCH_MOVIE_DETAILS_SUCCESS = 'FETCH_MOVIE_DETAILS_SUCCESS';
export const FETCH_MOVIE_DETAILS_FAILURE = 'FETCH_MOVIE_DETAILS_FAILURE';
export const UPDATE_NUMBER_OF_ITEMS = 'UPDATE_NUMBER_OF_ITEMS';
export const UPDATE_MOVIES_LOADING = 'UPDATE_MOVIES_LOADING';
export const UPDATE_MOVIE_DETAIL_LOADING = 'UPDATE_MOVIE_DETAIL_LOADING';
export const UPDATE_PAGE = 'UPDATE_PAGE';
export const UPDATE_OFFLINE = 'UPDATE_OFFLINE';

// Individual action interfaces for each type of action handled by the reducer
interface FetchTopMoviesSuccessAction {
    type: typeof FETCH_TOP_MOVIES_SUCCESS;
    payload: Movie[];  // Payload contains an array of movies
}

interface FetchTopMoviesFailureAction {
    type: typeof FETCH_TOP_MOVIES_FAILURE;
    payload: string;  // Payload contains the error message
}

interface FetchMovieDetailsSuccessAction {
    type: typeof FETCH_MOVIE_DETAILS_SUCCESS;
    payload: MovieDetail;  // Payload contains detailed movie data
}

interface FetchMovieDetailsFailureAction {
    type: typeof FETCH_MOVIE_DETAILS_FAILURE;
    payload: string;  // Payload contains the error message
}

interface UpdateNumberOfItemsAction {
    type: typeof UPDATE_NUMBER_OF_ITEMS;
    payload: number;  // Payload contains the total number of items
}

interface UpdateMoviesLoadingAction {
    type: typeof UPDATE_MOVIES_LOADING;
    payload: boolean;  // Payload indicates the loading state
}

interface UpdateMovieDetailLoadingAction {
    type: typeof UPDATE_MOVIE_DETAIL_LOADING;
    payload: boolean;  // Payload indicates the detail loading state
}

interface UpdatePageAction {
    type: typeof UPDATE_PAGE;
    payload: number;  // Payload contains the current page number
}

interface UpdateOfflineAction {
    type: typeof UPDATE_OFFLINE;
    payload: boolean;  // Payload indicates the offline status
}
// Prop interface for components receiving navigation and route parameters
export interface Props {
    route: {
        params: {
            movieId: number;  // Movie ID passed via navigation route
        }
    },
    navigation: any  // Navigation prop provided by React Navigation
}

// Union type for movie-related actions, used in type definitions for Redux actions
export type MovieActionTypes = FetchTopMoviesSuccessAction | FetchTopMoviesFailureAction | FetchMovieDetailsSuccessAction | FetchMovieDetailsFailureAction | UpdateNumberOfItemsAction | UpdateMoviesLoadingAction | UpdateMovieDetailLoadingAction | UpdatePageAction | UpdateOfflineAction;
